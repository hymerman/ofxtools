I'm fed up with egg not allowing export of statements, and of HSBC not allowing export of previous statements, and terrible interface for downloading recent transactions. I wrote a couple of little tools in C# to extract OFX-formatted statements from the egg and HSBC websites.

Currently only egg and HSBC (UK banks) are supported, I intend to add all the other financial institutes that I use soon (RBS, ING), and also to add a few tools I will find useful (an OFX file viewer since I find myself looking at them quite often, and a merger since that will make importing them into other software and websites much more efficient).

I know it's a very specific set of tools, and that's because I wrote them for myself! I'm now sharing the code since I'm sure someone else will find it useful, and since I'm not going to spend a lot of time maintaining it I'm also providing the source, for others to modify when the websites inevitably alter their formatting.

Update (2009/10/22): I've been a busy bee, and there's now a converter for ING Direct Savings, an editor (not just your run-of-the-mill viewer!), and a merger, which will also check for consistency in date ranges and transaction sums and closing balance details. Enough for me to properly keep tabs on my OFX files, at least. I'm going to do a bit more work improving the merger to remove duplicate transactions, then a bit of a tidy up and refactor, then I'll make some binaries available and finish up with this project.

Update (2010/05/05): I've written some instructions! Hurrah! I wrote this as a response to a user's questions on github, and figured I might as well make it part of the readme so others can benefit from it. So here it is:

Basically if you want to build it, you'll need Visual C# (Microsoft provide a free 'Express Edition' which is fine). Github allows you to download the source package to avoid needing to set up git and fetch the repository - just go to the ofxtools page and choose 'download source' in the top right. Extract that somewhere on your computer, and open up the OfxTools.sln file. Then in Visual Studio, choose "build -> batch build ...", then hit 'select all', and then 'build'. It'll churn away for a few seconds building all the tools. Once it's done, there'll be a file called HSBCXMLStatementToOFXConverter.exe in HSBCXMLStatementToOFXConverter\bin\Debug.

The input to the program is HTML files saved from the HSBC website, specifically the ones in 'previous statements'. What I do is click 'previous statements', then just go down the list, right click each one and choose 'save as...' and make sure it's just saving a HTML file (don't need images and so on, often called "web page, complete"). That'll save a really oddly named file to your computer, and that's the file the program will convert.

It's set up to take a bunch of filenames as its parameters and output them as an ofx file named after the date range it covers (since that's how I like to store them!). So you can either run it from the command prompt (cumbersome) or you can just drag files onto it in Windows, which is what I do. Typically I'll download a bunch of HTML files, select them all and drag them onto the exe in one go, then wait until it's done and delete the HTML files.

To check that they're sensible I made a little OfxEditor program which works in a similar way - drag the ofx file onto it to view/edit its contents. It's also got open/save menu options since it's a graphical app. I warn you now though, if you're using it to edit ofx files it's really quite hard to use - it's expecting dates and amounts in a very specific format and it'll probably crash if you get it wrong. I didn't need it to do much so I didn't concentrate on error handling and validation.

Since you're probably using the ofx files to import data to a personal finance website or program, there's another useful tool I wrote called OfxMerger. I found some of these sites can take a while to process each file and that if I wanted to import hundreds of them, it would take a very long time. So this program merges multiple ofx files together, and prints out some helpful warnings if it detects oddities like date ranges overlapping or having gaps, or end of statement totals not being consistent with their transactions and the previous statement's total. The output is one ofx file containing all the transactions of the input files. Usage is the same, drag a bunch of files onto it in one go. Also you can just drag a whole folder onto it and it'll work like that too.
